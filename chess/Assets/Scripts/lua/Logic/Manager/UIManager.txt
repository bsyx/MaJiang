--UI管理器
UIManager = {}
local this = UIManager;

this.panels = {};
this.forwardPanels = {};

--初始化
function UIManager.initUI()
    this.guiCamera = this.find("GuiCamera");
    this.uiForward = this.find("UIForward");
end

--设置rectTransform宽度
function UIManager.setWidth(tran,width)
    local rectTransform = tran.gameObject:GetComponent("RectTransform")
    rectTransform.sizeDelta = Vector2.New(width,rectTransform.sizeDelta.y);
end

--设置rectTransform高度
function UIManager.setHeight(tran,height)
    local rectTransform = tran.gameObject:GetComponent("RectTransform")
    rectTransform.sizeDelta = Vector2.New(rectTransform.sizeDelta.x,height);
end

--获取rectTransform宽度
function UIManager.getWidth(tran)
    local rectTransform = tran.gameObject:GetComponent("RectTransform")
    return rectTransform.sizeDelta.x;
end

--获取rectTransform高度
function UIManager.getHeight(tran)
    local rectTransform = tran.gameObject:GetComponent("RectTransform")
    return rectTransform.sizeDelta.y;
end

--通过name寻找GameObject
function UIManager.find(str)
	return GameObject.Find(str);
end

--通过name隐藏GameObject
function UIManager.hidden(str)
    local obj = GameObject.Find(str);
    if(obj ~= nil) then
        obj:SetActive(false);
    end
end

--隐藏GameObject
function UIManager.destroy(str)
    local obj = GameObject.Find(str);
    if(obj ~= nil) then
        GameObject.Destroy(obj);
        obj = nil;
    end
end

--创建新的GameObejct
function UIManager.newObject(prefab)
	return GameObject.Instantiate(prefab);
end

--重置GameObject的位置旋转缩放
function UIManager.reset(obj)
    obj.transform.localPosition = Vector3.New(0.0,0.0,0.0);
    obj.transform.localRotation = Quaternion.New(0.0,0.0,0.0,1.0);
    obj.transform.localScale = Vector3.New(1.0,1.0,1.0);
end

--创建panel
function UIManager.createPanel(panel_name)
    if(table.ContainsKey(this.panels,panel_name)) then
        local obj = this.panels[panel_name];
        this.initPanelFinished(obj)
    else
        PanelManager:CreatePanel(panel_name,this.initPanelFinished);
    end
end

--创建panel
function UIManager.createForward(panel_name)
    if(table.ContainsKey(this.forwardPanels,panel_name)) then
        local obj = this.forwardPanels[panel_name];
        this.initForwardFinished(obj);
    else
        PanelManager:CreatePanel(panel_name,this.initForwardFinished);
    end
end

--隐藏所有界面除了指定界面
function UIManager.showOnePanel(panelName)
    for key,obj in pairs(this.panels) do
        local obj = this.panels[key];
        if(key ~= panelName) then
            obj:SetActive(false);
        else
            obj:SetActive(true);
        end
    end
end

--隐藏其他界面显示登录界面
function UIManager.showOnlyPanel(panelName)
    local tb = {}
    for key,obj in pairs(this.panels) do
        if(key ~= panelName) then
            table.insert(tb,key);
        end
    end
    for key,name in pairs(tb) do
        this.destroyPanel(name);
    end
    local obj = this.panels[panelName];
    if(obj ~= nil) then
        obj:SetActive(true);
    end
end

--创建panel成功后回调
function UIManager.initPanelFinished(obj)
    ResManager.UnloadAssetBundle(obj.name);
    this.panels[obj.name] = obj;
    UIManager.showOnePanel(obj.name);
    EventManager.InvokeEvent(PanelFinishNames[obj.name],obj);
end

--创建panel成功后回调
function UIManager.initForwardFinished(obj)
    ResManager.UnloadAssetBundle(obj.name);
    this.forwardPanels[obj.name] = obj;
    obj:SetActive(true);
    EventManager.InvokeEvent(PanelFinishNames[obj.name],obj);
end

--添加LuaBehaviour
function UIManager.addLuaBehaviour(obj)
    if(obj:GetComponent("LuaBehaviour") == nil) then
        local lb = Teacher.LuaBehaviour.GetClassType();
        local script = obj:AddComponent(lb);
		return script;
    end
	return nil;
end

--隐藏panel
function UIManager.hiddenPanel(panel_name)
    local obj = this.panels[panel_name];
    if(obj ~= nil) then
        obj:SetActive(false);
    else
        log("======不存在该panel======");
    end
end

--销毁指定名字的panel
function UIManager.destroyPanel(panel_name)
    local obj = this.panels[panel_name];
    log("=====destroy panel name===="..panel_name);
    if(obj ~= nil) then
        GameObject.Destroy(obj);
        obj = nil;
        this.panels[panel_name] = nil;
    else
        log("======不存在该panel======");
    end
end

--注册所有panel加载完毕的回调函数
function UIManager.RegPanelsFinishEvents()
    EventManager.RegisterEvent(PanelFinishNames[LoadPanel],this.FowardPanelFinish);

    EventManager.RegisterEvent(PanelFinishNames[MainPanel],this.PanelFinishCallback);
    EventManager.RegisterEvent(PanelFinishNames[PkPanel],this.PanelFinishCallback);
end

--UIForward摄像头下的所有panel
function UIManager.FowardPanelFinish(obj)
    obj.transform:SetParent(this.uiForward.transform);
    UIManager.addLuaBehaviour(obj);
    UIManager.reset(obj);
end

--panel加载完毕的回调函数
function UIManager.PanelFinishCallback(obj)
    obj.transform:SetParent(this.guiCamera.transform);
    UIManager.addLuaBehaviour(obj);
    UIManager.reset(obj);
end

--加载图片资源
function UIManager.loadImage(abName,name,go)
	ResManager:LoadImage(abName,name,go,this.loadImageFinished);
end

function UIManager.loadImageFinished(prefab,obj)
    local img = obj:GetComponent("Image");
    img.sprite = prefab;
end